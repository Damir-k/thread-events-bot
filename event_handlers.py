from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ConversationHandler, filters

from datetime import date
import re

from custom_context import CustomContext, State
from dynamic_filters import MemberFilter
from callback_types import EventVerdict, ManageEvent

def get_readable_status(status: str) -> str:
    match status:
        case "pending":
            readable_status = "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üëÄ"
        case "expired":
            readable_status = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚åõ"
        case "declined":
            readable_status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå"
        case "active":
            readable_status = "–ê–∫—Ç–∏–≤–Ω–æ üü¢"
        case "inactive":
            readable_status = "–°–∫—Ä—ã—Ç–æ üò∂‚Äçüå´Ô∏è"
        case _:
            readable_status = "??? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã —Å–ª–æ–º–∞–ª–∏ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @damirablv"
    return readable_status

async def new_event(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_reply_markup(None)
    if (~MemberFilter(context.database)).check_update(update):
        await update.effective_message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return ConversationHandler.END

    await update.effective_user.send_message("–£—Ä–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return State.EVENT_NAME

async def get_event_name(update: Update, context: CustomContext):
    context.user_data['event_name'] = update.message.text_html
    await update.message.reply_text("–°—É–ø–µ—Ä, –≥–¥–µ –æ–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? (–ê–¥—Ä–µ—Å/—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)")
    return State.LOCATION

async def get_event_location(update: Update, context: CustomContext):
    context.user_data['location'] = update.message.text_html
    await update.message.reply_text("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è? (–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)")
    return State.DATE_TIME

async def get_event_datetime(update: Update, context: CustomContext):
    context.user_data['datetime'] = update.message.text_html
    await update.message.reply_text("\n".join([
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–ª—å–Ω–æ.",
        "(–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)",
        "–í–∞–∂–Ω–æ! –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥"
    ]))
    return State.EXPIRATION_DATE

async def get_event_expiration_date(update: Update, context: CustomContext):
    try:
        iso_date = date.fromisoformat("-".join(update.message.text.split('.')[::-1]))
    except ValueError:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥")
        return
    context.user_data['expiration_date'] = str(iso_date)
    await update.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ª—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º—Å—è:")
    return State.DESCRIPTION

async def get_event_description(update: Update, context: CustomContext):
    context.user_data['description'] = update.message.text_html
    txt = "\n".join([
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
        "",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {context.user_data["event_name"]}",
        f"<b>–ú–µ—Å—Ç–æ</b>: {context.user_data["location"]}",
        f"<b>–í—Ä–µ–º—è</b>: {context.user_data["datetime"]}",
        f"<b>–ì–æ–¥–µ–Ω –¥–æ:</b> {context.user_data["expiration_date"]}",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {context.user_data["description"]}"
    ])
    markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_event"),
        InlineKeyboardButton("–ù–µ—Ç, —Ö–æ—á—É –∫–æ–µ-—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_event")
    ]])
    await update.message.reply_text(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.CONFIRM_EVENT

async def confirm_event(update: Update, context: CustomContext):
    await update.callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    event = {
        "event_name": context.user_data["event_name"],
        "location": context.user_data["location"],
        "datetime": context.user_data["datetime"],
        "expiration_date": context.user_data["expiration_date"],
        "description": context.user_data["description"],
        "author": update.effective_user.id,
        "status": "pending",
    }
    txt = "\n".join([
        "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! ‚ù§Ô∏è",
        "",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {event["event_name"]}",
        f"<b>–ú–µ—Å—Ç–æ</b>: {event["location"]}",
        f"<b>–í—Ä–µ–º—è</b>: {event["datetime"]}",
        f"<b>–ì–æ–¥–µ–Ω –¥–æ:</b> {event["expiration_date"]}",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {event["description"]}"
    ])
    await update.callback_query.edit_message_text(txt, parse_mode=ParseMode.HTML)

    event_id = context.database.next_event_id()
    context.database.data["events"][event_id] = event
    context.database.save()

    username = update.effective_user.username
    name = update.effective_user.full_name
    keyboard = [[
        InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=EventVerdict(event_id, accept=True)),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=EventVerdict(event_id, accept=False))
    ]]
    markup = InlineKeyboardMarkup(keyboard)
    msg = "\n".join([
        f"@{username} - {name} —Ö–æ—á–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (id:{event_id}):",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {event["event_name"]}",
        f"<b>–ú–µ—Å—Ç–æ</b>: {event["location"]}",
        f"<b>–í—Ä–µ–º—è</b>: {event["datetime"]}",
        f"<b>–ì–æ–¥–µ–Ω –¥–æ:</b> {event["expiration_date"]}",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {event["description"]}"
    ])
    await context.bot.send_message(
        chat_id=int(context.config["ADMIN_CHAT_ID"]), 
        text=msg, 
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

async def cancel_event_creation(update: Update, context: CustomContext):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data.clear()
    return ConversationHandler.END

async def event_verdict(update: Update, context: CustomContext):
    await update.callback_query.answer()
    verdict = update.callback_query.data

    db = context.database
    event = db.data["events"][str(verdict.event_id)]
    msg_admin = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event["event_name"]}\" (id: {verdict.event_id}) "
    if verdict.accept:
        db.data["events"][str(verdict.event_id)]["status"] = "active"
        msg_admin += "–ø—Ä–∏–Ω—è—Ç–æ ‚úÖ"
    else:
        db.data["events"][str(verdict.event_id)]["status"] = "declined"
        msg_admin += "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå"
    db.save()
    await update.callback_query.edit_message_text(msg_admin)
    await context.bot.send_message(event["author"], msg_admin)

async def list_events(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_reply_markup(None)
    if (~MemberFilter(context.database)).check_update(update):
        await update.effective_message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return
    
    events_list = context.get_events(update.effective_user.id)
    keyboard = []
    for (event_id, event) in events_list.items():
        readable_status = get_readable_status(event["status"])
        event_name_clean = re.sub(r'<[^<]+?>', "", event["event_name"])
        event_name = event_name_clean[:25] + ("..." if len(event_name_clean) >= 25 else '')
        keyboard.append([
            InlineKeyboardButton(
                f"({readable_status[-1]}) [{event_id}] {event_name}",
                callback_data=ManageEvent(event_id)
            )
        ])
    if update.callback_query:
        await update.callback_query.from_user.send_message(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

async def list_every_event(update: Update, context: CustomContext) -> None:
    if not filters.Chat(int(context.config["OWNER"])).check_update(update):
        await update.effective_message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞")
        return
    events_list = context.get_events(update.effective_user.id, filter_available=False)
    keyboard = []
    for (event_id, event) in events_list.items():
        readable_status = get_readable_status(event["status"])
        event_name_clean = re.sub(r'<[^<]+?>', "", event["event_name"])
        event_name = event_name_clean[:25] + ("..." if len(event_name_clean) >= 25 else '')
        keyboard.append([
            InlineKeyboardButton(
                f"({readable_status[-1]}) [{event_id}] {event_name}",
                callback_data=ManageEvent(event_id)
            )
        ])
    if update.callback_query:
        await update.callback_query.from_user.send_message(
            "–°–ø–∏—Å–æ–∫ –í–°–ï–• –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –í–°–ï–• –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    

async def manage_event(update: Update, context: CustomContext):
    if not update.callback_query:
        return
    await update.callback_query.answer()
    event_id = update.callback_query.data.event_id
    event = context.database.data["events"][event_id]
    
    author_username = context.database.data["members"][str(event["author"])]["username"]
    txt = "\n".join([
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {author_username}",
        "",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {event["event_name"]}",
        f"<b>–ú–µ—Å—Ç–æ</b>: {event["location"]}",
        f"<b>–í—Ä–µ–º—è</b>: {event["datetime"]}",
        f"<b>–ì–æ–¥–µ–Ω –¥–æ:</b> {event["expiration_date"]}",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {event["description"]}",
        "",
        f"–°—Ç–∞—Ç—É—Å: {get_readable_status(event["status"])}"
    ])
    await update.callback_query.from_user.send_message(txt, parse_mode=ParseMode.HTML)

