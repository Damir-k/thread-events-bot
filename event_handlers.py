from telegram import (Update, InlineKeyboardMarkup, InlineKeyboardButton, 
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)
from telegram.constants import ParseMode
from telegram.ext import ConversationHandler, filters

from datetime import date
import re

from custom_context import CustomContext, State, ExactMessages
from dynamic_filters import MemberFilter
from callback_types import EventVerdict, ShowEvent, ManageEvent, EditEvent

def get_readable_status(status: str) -> str:
    match status:
        case "pending":
            readable_status = "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üëÄ"
        case "expired":
            readable_status = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚åõ"
        case "declined":
            readable_status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå"
        case "active":
            readable_status = "–ê–∫—Ç–∏–≤–Ω–æ üü¢"
        case "inactive":
            readable_status = "–°–∫—Ä—ã—Ç–æ ü•∑"
        case "cool":
            readable_status = "–£–ª—ã–±–∞–µ—Ç—Å—è üòº"
        case _:
            readable_status = "??? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã —Å–ª–æ–º–∞–ª–∏ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @damirablv ‚ò¢Ô∏è"
    return readable_status

def get_event_summary(event: dict) -> str:
    summary = "\n".join([
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.setdefault("event_name", "-")}",
        f"<b>–ú–µ—Å—Ç–æ:</b> {event.setdefault("location", "-")}",
        f"<b>–í—Ä–µ–º—è:</b> {event.setdefault("datetime", "-")}",
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {event.setdefault("age", "-")}",
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {event.setdefault("size", "-")}",
        f"<b>–ì–æ–¥–µ–Ω –¥–æ:</b> {event.setdefault("expiration_date", "0001-01-01")}",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.setdefault("description", "-")}",
    ])
    return summary

async def new_event(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_reply_markup(None)
        await update.effective_user.send_message(
            text="<i>–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é...</i>", 
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
    if (~MemberFilter(context.database)).check_update(update):
        await update.effective_message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return ConversationHandler.END
    context.logger.warning(f"@{update.effective_user.username} creating event")
    new_event_text = "\n".join([
        "<b>–£—Ä–∞! –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</b> üòå ",
        ""
    ])
    mid_txt = "\n".join([
        "–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π: ",
        "–ù–∞–∑–≤–∞–Ω–∏–µ, –º–µ—Å—Ç–æ, –¥–∞—Ç—É/–≤—Ä–µ–º—è, –¥–∞—Ç—É –ø—Ä–æ—Å—Ä–æ—á–∫–∏, –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, ",
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        "",
        "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π",
        "",
        "<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</i>"
    ])
    if "event_name" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["event_name"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data="keep_event_name"
        )]]
    else:
        txt = new_event_text + "\n" + mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.EVENT_NAME

async def get_event_name(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['event_name'] = update.message.text_html
    mid_txt = "<i>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å/–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>"
    if "location" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["location"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ",
            callback_data="keep_location"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.LOCATION

async def get_event_location(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['location'] = update.message.text_html
    mid_txt = "<i>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>"
    if "datetime" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["datetime"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
            callback_data="keep_datetime"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.DATE_TIME

async def get_event_datetime(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['datetime'] = update.message.text_html
    mid_txt = "<i>–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>"
    if "age" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["age"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            callback_data="keep_event_age"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.EVENT_AGE 

async def get_event_age(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['age'] = update.message.text_html
    mid_txt = "<i>–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>"
    if "size" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["size"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫",
            callback_data="keep_event_size"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.EVENT_SIZE

async def get_event_size(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —á–µ–ª–æ–≤–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['size'] = update.message.text_html
    mid_txt = "\n".join([
        "<i>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–ª—å–Ω–æ:</i>",
        "",
        "(–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)",
        "–í–∞–∂–Ω–æ! <u>–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥</u>"
    ])
    if "expiration_date" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["expiration_date"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏",
            callback_data="keep_expiration_date"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.EXPIRATION_DATE

async def get_event_expiration_date(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        try:
            iso_date = date.fromisoformat("-".join(update.message.text.split('.')[::-1]))
        except ValueError:
            await update.message.reply_text("<u>–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥</u>")
            return
        context.user_data['expiration_date'] = str(iso_date)
    mid_txt = "<i>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ª—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º—Å—è:</i>"
    if "description" in context.user_data:
        edit_event_text = f"\n<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["description"]}</blockquote>"
        txt = mid_txt + "\n" + edit_event_text
        keyboard = [[InlineKeyboardButton(
            "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="keep_description"
        )]]
    else:
        txt = mid_txt
        keyboard = []
    keyboard.append([InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", 
        callback_data="cancel_event_creation"
    )])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.DESCRIPTION

async def get_event_description(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer("–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await update.callback_query.edit_message_reply_markup(None)
    else:
        context.user_data['description'] = update.message.text_html
    txt = "\n".join([
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
        "",
        get_event_summary(context.user_data)
    ])
    keyboard = [[
        InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_event"),
        InlineKeyboardButton("–ù–µ—Ç, —Ö–æ—á—É –∫–æ–µ-—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_event")
    ],
    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="cancel_event_creation")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    return State.CONFIRM_EVENT

async def confirm_event(update: Update, context: CustomContext):
    await update.callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    event = {
        "event_name": context.user_data["event_name"],
        "location": context.user_data["location"],
        "datetime": context.user_data["datetime"],
        "age": context.user_data["age"],
        "size": context.user_data["size"],
        "expiration_date": context.user_data["expiration_date"],
        "description": context.user_data["description"],
        "author": update.effective_user.id,
        "status": "pending",
        "subs": context.user_data.setdefault("subs", [update.effective_user.id])
    }
    event_id = context.user_data.setdefault("event_id", context.database.next_event_id())
    context.user_data.clear()
    txt = "\n".join([
        "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! ‚ù§Ô∏è",
        "",
        get_event_summary(event)
    ])
    await update.callback_query.edit_message_text(txt, parse_mode=ParseMode.HTML)
    
    keyboard = [[
        KeyboardButton(ExactMessages.MAIN_MENU.value)
    ]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.effective_user.send_message(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –ø–æ–º–æ—â—å—é /list_events",
        reply_markup=markup
    )

    context.database.data["events"][str(event_id)] = event
    context.database.data["members"][str(update.effective_user.id)]["events"].append(event_id)
    context.database.save()

    username = update.effective_user.username
    name = update.effective_user.full_name
    keyboard = [[
        InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=EventVerdict(event_id, accept=True)),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=EventVerdict(event_id, accept=False))
    ]]
    markup = InlineKeyboardMarkup(keyboard)
    msg = "\n".join([
        f"@{username} - {name} —Ö–æ—á–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (id:{event_id}):",
        "",
        get_event_summary(event)    
    ])
    await context.bot.send_message(
        chat_id=int(context.config["ADMIN_CHAT_ID"]), 
        text=msg, 
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

async def cancel_event_creation(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_reply_markup(None)
    context.logger.info(f"@{update.effective_user.username} - –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data.clear()
    keyboard = [[
        KeyboardButton(ExactMessages.MAIN_MENU.value)
    ]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.effective_user.send_message("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
    return ConversationHandler.END

async def event_verdict(update: Update, context: CustomContext):
    await update.callback_query.answer()
    verdict = update.callback_query.data

    db = context.database
    event = db.data["events"][str(verdict.event_id)]
    msg_admin = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event["event_name"]}\" (id: {verdict.event_id}) "
    if verdict.accept:
        db.data["events"][str(verdict.event_id)]["status"] = "active"
        msg_admin += "–ø—Ä–∏–Ω—è—Ç–æ ‚úÖ"
    else:
        db.data["events"][str(verdict.event_id)]["status"] = "declined"
        msg_admin += "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå"
    db.save()
    await update.callback_query.edit_message_text(msg_admin)
    await context.bot.send_message(event["author"], msg_admin)
    context.logger.info(msg_admin)

async def list_events(update: Update, context: CustomContext):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_reply_markup(None)
    if (~MemberFilter(context.database)).check_update(update):
        await update.effective_message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return
    
    events_list = context.get_events(update.effective_user.id)
    keyboard = []
    for (event_id, event) in events_list.items():
        readable_status = get_readable_status(event["status"])
        event_name_clean = re.sub(r'<[^<]+?>', "", event["event_name"])
        event_name = event_name_clean[:25] + ("..." if len(event_name_clean) >= 25 else '')
        keyboard.append([
            InlineKeyboardButton(
                f"({readable_status[-1]}) [{event_id}] {event_name}",
                callback_data=ShowEvent(event_id)
            )
        ])
    if update.callback_query:
        await update.callback_query.from_user.send_message(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

async def list_every_event(update: Update, context: CustomContext) -> None:
    if not filters.Chat(int(context.config["OWNER_CHAT_ID"])).check_update(update):
        await update.effective_message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞")
        return
    events_list = context.get_events(update.effective_user.id, filter_available=False)
    keyboard = []
    for (event_id, event) in events_list.items():
        readable_status = get_readable_status(event["status"])
        event_name_clean = re.sub(r'<[^<]+?>', "", event["event_name"])
        event_name = event_name_clean[:25] + ("..." if len(event_name_clean) >= 25 else '')
        keyboard.append([
            InlineKeyboardButton(
                f"({readable_status[-1]}) [{event_id}] {event_name}",
                callback_data=ShowEvent(event_id)
            )
        ])
    if update.callback_query:
        await update.callback_query.from_user.send_message(
            "–°–ø–∏—Å–æ–∫ –í–°–ï–• –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –í–°–ï–• –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

async def event_info(update: Update, context: CustomContext):
    db = context.database
    event_id = update.callback_query.data.event_id
    if event_id not in db.data["events"]:
        await update.callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
        return "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ", None
    event = db.data["events"][event_id]
    
    author = str(event["author"])
    author_username = db.data["members"][author]["username"]
    user = str(update.effective_user.id)
    user_subbed = int(event_id) in db.data["members"][user]["events"]
    subbed = db.data["events"][event_id].setdefault("subs", [author])
    txt = "\n".join([
        f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> {author_username}",
        "",
        get_event_summary(event),
        "",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {get_readable_status(event["status"])}",
        "",
        f"<i>–í—ã {'—É—á–∞—Å—Ç–≤—É–µ—Ç–µ!' if user_subbed else '–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ'}</i>",
        f"<i>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(subbed)}</i>"
    ])
    keyboard = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
        callback_data=ManageEvent("show_subs", event_id))]
    ]
    if author != user:
        if user_subbed:
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ ü´•", 
                callback_data=ManageEvent("unfollow", event_id))]
            )
        else:
            keyboard.append([InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å! üòé", 
                callback_data=ManageEvent("follow", event_id))]
            )
    else:
        if event["status"] == "active":
            keyboard.append([InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=ManageEvent("hide", event_id))])
        elif event["status"] == "inactive":
            keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=ManageEvent("show", event_id))])
        keyboard.append([
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=ManageEvent("edit", event_id)),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=ManageEvent("delete", event_id))
        ])
    markup = InlineKeyboardMarkup(keyboard)
    return txt, markup

async def show_event(update: Update, context: CustomContext):
    if not update.callback_query:
        return
    await update.callback_query.answer()
    txt, markup = await event_info(update, context)
    await update.callback_query.from_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)

async def manage_event(update: Update, context: CustomContext):
    if not update.callback_query:
        return
    await update.callback_query.answer()
    query = update.callback_query
    event_id = query.data.event_id
    user_id = query.from_user.id
    action = query.data.action
    db = context.database
    event = db.data["events"][event_id]
    context.logger.info(f"@{query.from_user.username} - manage event {event_id}")

    if action == "show_subs":
        subs = event.setdefault("subs", [event["author"]])
        db.save()
        members_list = [
            f"{db.data["members"][str(sub)]["username"]}: {db.data["members"][str(sub)]["name"]}"
            for sub in subs
        ]
        subs_table = "\n".join(members_list)
        txt = f"<b>–£—á–∞—Å—Ç–≤—É—é—Ç: {len(members_list)}</b>\n" + subs_table
        await query.from_user.send_message(txt, parse_mode=ParseMode.HTML)
    elif action == "follow":
        db.data["members"][str(user_id)]["events"].append(int(event_id))
        db.data["events"][event_id]["subs"].append(user_id)
        db.save()
        txt, markup = await event_info(update, context)
        await query.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    elif action == "unfollow":
        followed_events = db.data["members"][str(user_id)]["events"]
        followed_events.pop(followed_events.index(int(event_id)))
        event_subs = db.data["events"][event_id]["subs"]
        event_subs.pop(event_subs.index(user_id))
        db.save()
        txt, markup = await event_info(update, context)
        await query.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    elif action == "show":
        db.data["events"][event_id]["status"] = "active"
        db.save()
        txt, markup = await event_info(update, context)
        await query.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    elif action == "hide":
        db.data["events"][event_id]["status"] = "inactive"
        db.save()
        txt, markup = await event_info(update, context)
        await query.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
    elif action == "edit":
        await query.from_user.send_message("\n".join([
            "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è",
            "–∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫—É"
        ]), reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=EditEvent("edit", event_id, query.message.chat_id, query.message.message_id)),
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å", callback_data=EditEvent("cancel", event_id))
        ]]))
    elif action == "delete":
        await query.from_user.send_message("\n".join([
            "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ —Å–≤–æ—ë –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,",
            "—ç—Ç–æ –ù–ê–í–°–ï–ì–î–ê"
        ]), reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–£–î–ê–õ–ò–¢–¨", callback_data=EditEvent("delete", event_id, query.message.chat_id, query.message.message_id)),
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å", callback_data=EditEvent("cancel", event_id))
        ]]))

async def edit_event(update: Update, context: CustomContext):
    if not update.callback_query:
        return
    query = update.callback_query
    await query.answer()
    await query.delete_message()
    mode = query.data.mode
    event_id = query.data.event_id
    chat_id = query.data.chat_id
    message_id = query.data.message_id
    db = context.database

    if mode == "cancel":
        return
    if mode == "delete":
        context.logger.warning(f"@{query.from_user.username} - delete event {event_id}")
        await context.bot.delete_message(chat_id, message_id)
        event = db.data["events"].pop(event_id)
        db.save()
        await query.from_user.send_message(f"<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:</b>\n{event["event_name"]}", parse_mode=ParseMode.HTML)
        return
    if mode == "edit":
        context.logger.warning(f"@{query.from_user.username} - edit event {event_id}")
        await context.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        await update.effective_user.send_message(
            text="<i>–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é...</i>", 
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        event = db.data["events"][event_id]
        context.user_data.update(event)
        context.user_data["event_id"] = int(event_id)
        txt = "\n".join([
            "–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: ",
            "–ù–∞–∑–≤–∞–Ω–∏–µ, –º–µ—Å—Ç–æ, –¥–∞—Ç—É/–≤—Ä–µ–º—è, –¥–∞—Ç—É –ø—Ä–æ—Å—Ä–æ—á–∫–∏, –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, ",
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            "",
            "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π",
            "",
            "<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</i>",
            "",
            f"<i>[–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ]</i><blockquote>{context.user_data["event_name"]}</blockquote>"
        ])
        keyboard = [
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="keep_event_name")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="cancel_event_creation")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.effective_user.send_message(txt, parse_mode=ParseMode.HTML, reply_markup=markup)
        return State.EVENT_NAME

